doctype html
html(lang='en')

  head
    title PERSON UPDATE | xxx
    meta(name='description', content='xxx')
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, shrink-to-fit=no')
    link(rel='shortcut icon', href='/favicon.ico', type='image/x-icon')
    meta(http-equiv='x-ua-compatible', content='ie=edge')
    link(href='//fonts.googleapis.com/css?family=Roboto' rel='stylesheet' type='text/css' async)
    link(href='https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css' rel='stylesheet' type='text/css' async)

    style.

      body {
        font-family:'Roboto',sans-serif;
        box-sizing:border-box;
        background-color:#e8ebf2;
        padding:0px;
        margin:0px;
      }

      .contact-card-container {
        border: 1px solid #d7d8e1;
        width:calc(100% - 44px);
        background-color:white;
        margin:22px;
      }

      .contact-card-header {
        border-bottom:1px solid #f3f3f5;
        background:#fbfaff;
        cursor:default;
        padding:0px;
        width:100%;
        margin:0px;
      }

      .contact-card-header-left-button {
        background-color:transparent;
        padding-left:44px;
        padding-top:33px;
        font-size:1.25em;
        cursor:pointer;
        color:#1c7ef8;
        border:none;
        float:left;
        margin:0px;
      }

      .contact-card-header-right-button {
        padding-right:44px;
        padding-top:33px;
        font-size:1.25em;
        cursor:pointer;
        color:#1c7ef8;
        float:right;
        margin:0px;
      }

      .contact-card-name {
        text-align:center;
        padding-top:88px;
        font-size:2em;
        margin:0px;
      }

      .contact-card-last-updated {
        padding-bottom:11px;
        text-align:center;
        padding-top:5px;
        font-weight:300;
        font-size:1em;
        color:#808080;
        margin:0px;
      }

      .contact-card-action-container {
        justify-content: center;
        padding-bottom:44px;
        display: flex;
      }

      .contact-card-action-button {
        background-color:#808080;
        border-radius:2em;
        margin-left:14px;
        cursor:pointer;
        margin:22px;
        height:4em;
        width:4em;
      }

      .contact-card-action-icon {
        vertical-align:center;
        text-align:center;
        line-height:2em;
        color:white;
        height:100%;
        width:100%;
      }

      .contact-card-action-text {
        font-family:'Roboto',sans-serif;
        text-align:center;
        margin-top:10px;
        font-size:1em;
        cursor:default;
        color:#808080;
        padding:0px;
      }

      .contact-info-container {
        width:calc(50% + 60px);
        padding-bottom:22px;
        padding-left:55px;
        font-size:1.4em;
        padding-top:22px;
        cursor:default;
        margin:0px;
      }

      .contact-info-action-input {
        padding:11px;
        font-size:1.2em;
        width:100%;
        border:none;
      }

      .contact-info-label {
        color: #808080;
        float:left;
      }

      .contact-info-error {
        color: #808080;
        float:left;
      }

      .contact-info-divider {
        border: 1px solid #f3f3f5;
      }

      .contact-info-emergency-header {
        color:lightGray;
      }

      .contact-info-emergency-action-text {
        padding-bottom:22px;
        cursor:pointer;
        color:#808080;
      }

      .contact-delete-action {
        padding-bottom:22px;
        padding-top:44px;
        font-size:1.2em;
        cursor:pointer;
        color:#fc3d39;
        text-align:left;
      }


      @media screen and (min-width: 1024px) {

        .left-pannel {
          display: inline-block;
          box-sizing:border-box;
          overflow:scroll;
          height:100vh;
          float:left;
          width:30%;
        }

        .right-pannel {
          background-color:#e8ebf2;
          box-sizing:border-box;
          display: inline-block;
          overflow:scroll;
          font-size:1em;
          height:100vh;
          float:right;
          margin:0px;
          width:70%;
        }

        .contact-card-container {
          box-sizing:border-box;
          border: 1px solid #d7d8e1;
          margin:7%;
          width:86%;
        }

        .contact-card-header {
          border-bottom:1px solid #f3f3f5;
          box-sizing:border-box;
          background:#fbfaff;
          cursor:default;
        }

        .contact-card-header-left-button {
          padding-left:44px;
          padding-top:33px;
          font-size:1.5em;
          cursor:pointer;
          color:#1c7ef8;
          float:left;
          margin:0px;
        }

        .contact-card-header-right-button {
          padding-right:44px;
          padding-top:33px;
          font-size:1.5em;
          cursor:pointer;
          color:#1c7ef8;
          float:right;
          margin:0px;
        }

        .contact-card-name {
          text-align:center;
          padding-top:33px;
          font-size:3em;
          margin:0px;
        }

        .contact-card-last-updated {
          padding-bottom:11px;
          text-align:center;
          padding-top:5px;
          font-weight:300;
          font-size:1.25em;
          color:#808080;
          margin:0px;
        }

        .contact-card-action-container {
          justify-content: center;
          padding-bottom:44px;
          display: flex;
        }

        .contact-card-action-button {
          background-color:#808080;
          border-radius:2em;
          cursor:pointer;
          margin:22px;
          height:4em;
          width:4em;
        }

        .contact-card-action-icon {
          vertical-align:center;
          text-align:center;
          line-height:2em;
          color:white;
          height:100%;
          width:100%;
        }

        .contact-card-action-text {
          font-family:'Roboto',sans-serif;
          text-align:center;
          margin-top:10px;
          font-size:1.25em;
          cursor:default;
          color:#808080;
          padding:0px;
        }

        .contact-info-container {
          box-sizing:border-box;
          padding-left:55px;
          font-size:1.6em;
          cursor:default;
          margin:0px;
          width:86%;
        }

        .contact-info-action-input {
          cursor:pointer;
        }

        .contact-info-divider {
          border: 1px solid #f3f3f5;
        }

        .contact-info-emergency-header {
          color:lightGray;
        }

        .contact-info-emergency-action-text {
          padding-bottom:22px;
          cursor:pointer;
          color:#808080;
        }

        .contact-delete-action {
          padding-bottom:22px;
          font-size:1.2em;
          cursor:pointer;
          color:#fc3d39;
          text-align:center;
        }
      }


  body


    //------
    //-CARD CONTAINER
    //-------
    form(action="/person/"+personID+"/update" method="POST")
      input(type="hidden" name="_csrf", value=csrfToken)
      input(type="hidden" name="personDisambiguatingDescription" value=Date.now() )
      div(id="contactCardContainer" class="contact-card-container")
        //HEADER
        div(id="contactCardHeader" class="contact-card-header")
          input(id="contactCardHeaderLeftButton" class="contact-card-header-left-button" type="submit" value="Done")
          p(id="contactCardHeaderRightButton" class="contact-card-header-right-button" onclick="window.location.href='/person/"+personID+"'") Cancel
          h1(id="contactCardName" class="contact-card-name") #{person.givenName} #{person.familyName}
          p(id="contactCardLastUpdated" class="contact-card-last-updated") #{lastUpdated}
          //ACTIONS
          div(id="contactCardActionContainer" class="contact-card-action-container")
            div(id="contactCardPhoneButton" class="contact-card-action-button")
              span(id="contactCardPhoneIcon" class="contact-card-action-icon fa fa-phone fa-2x")
              p(id="contactCardPhoneText" class="contact-card-action-text") phone
            div(id="contactCardEmailButton" class="contact-card-action-button")
              span(id="contactCardEmailIcon" class="contact-card-action-icon fa fa-envelope fa-2x")
              p(id="contactCardEmailText" class="contact-card-action-text") email
        /////////
        //INFO
        /////////
        div(id="contactInfoContainer" class="contact-info-container")
          p(class="contact-info-label") first name &nbsp
          p(id="contactInfoGivenNameError" class="contact-info-error")
          input(id="contactInfoFirstNameInput" class="contact-info-action-input" name="personGivenName" placeholder="Jane" value=person.givenName)
          div(class="contact-info-divider")

          p(class="contact-info-label") last name &nbsp
          p(id="contactInfoFamilyNameError" class="contact-info-error")
          input(id="contactInfoFamilyNameInput" class="contact-info-action-input" name="personFamilyName" placeholder="Doe" value=person.familyName)
          div(class="contact-info-divider")

          p(id="contactEmailInputLabel" class="contact-info-label") email &nbsp
          p(id="contactEmailInputError" class="contact-info-error")
          input(id="contactEmailInput" class="contact-info-action-input" name="personEmail" placeholder="email@email.com" value=person.email)
          div(id="contactEmailDivider" class="contact-info-divider")

          p(class="contact-info-label") phone &nbsp
          p(id="contactInfoPhoneError" class="contact-info-error")
          input(id="contactInfoPhoneInput" class="contact-info-action-input" name="personTelephone" placeholder="(555) 555-5555" value=person.telephone)
          div(class="contact-info-divider")

          - var emergencyContact = person.knows && person.knows.length? person.knows[0] : {givenName:'',familyName:'',telephone:''}
          p(class="contact-info-emergency-header") Emergency Contacts
          p(class="contact-info-label") first name &nbsp
          p(id="emergencyContactGivenNameError" class="contact-info-error")
          input(id="emergencyContactGivenNameInput" class="contact-info-action-input" name="personKnows0GivenName" placeholder="John" value=emergencyContact.givenName)
          div(class="contact-info-divider")

          p(class="contact-info-label") last name &nbsp
          p(id="emergencyContactFamilyNameError" class="contact-info-error")
          input(id="emergencyContactFamilyNameInput" class="contact-info-action-input" name="personKnows0FamilyName" placeholder="Doe" value=emergencyContact.familyName)
          div(class="contact-info-divider")

          p(class="contact-info-label") phone &nbsp
          p(id="emergencyContactTelephoneError" class="contact-info-error")
          input(id="emergencyContactTelephoneInput" class="contact-info-action-input" name="personKnows0Telephone" placeholder="(555) 555-5555" value=emergencyContact.telephone)
          div(class="contact-info-divider")
          p(class="contact-delete-action") Delete Contact


script.
  var hasErrors = false;
  var contact = !{JSON.stringify(person)}
  var $personFullName = document.querySelector('#contactCardName')
  var emergencyContact = !{JSON.stringify(emergencyContact)}

  var $contactCardPhoneButton = document.querySelector('#contactCardPhoneButton');
  var $contactCardPhoneIcon = document.querySelector('#contactCardPhoneIcon');
  var $contactCardPhoneText = document.querySelector('#contactCardPhoneText');


  //Person Given Name
  var $contactGivenNameInput = document.querySelector('#contactInfoFirstNameInput');
  var $contactGivenNameError = document.querySelector('#contactInfoGivenNameError');
  //Person Family Name
  var $contactFamilyNameInput = document.querySelector('#contactInfoFamilyNameInput');
  var $contactFamilyNameError = document.querySelector('#contactInfoFamilyNameError');


  //Emergency Contact Given Name
  var $emergencyContactGivenNameInput = document.querySelector('#emergencyContactGivenNameInput');
  var $emergencyContactGivenNameError = document.querySelector('#emergencyContactGivenNameError');
  //Emergency Contact Family Name
  var $emergencyContactFamilyNameInput = document.querySelector('#emergencyContactFamilyNameInput');
  var $emergencyContactFamilyNameError = document.querySelector('#emergencyContactFamilyNameError');
  //Emergency Contact Phone
  var $emergencyContactTelephoneInput = document.querySelector('#emergencyContactTelephoneInput');
  var $emergencyContactTelephoneError = document.querySelector('#emergencyContactTelephoneError');


  let updateHeader = function(){
    if(contact.givenName && contact.familyName){
      $personFullName.innerHTML = `${contact.givenName || 'Update'} ${contact.familyName || 'Contact'}`;
      $personFullName.style.color = "black";
    } else if(contact.givenName || contact.familyName){
      $personFullName.innerHTML = `${contact.givenName || ''} ${contact.familyName || ''}`;
      $personFullName.style.color = "black";
    } else {
      $personFullName.innerHTML = 'Update Contact';
      $personFullName.style.color = "#808080";
    }
  }


  let SPACE_KEY = 32;
  var spaceRegex = /\s+/g;
  var digitRegex = /\d+/g;
  var nonAlphabeticalRegex = /\W/g;
  var alphabeticalRegex = /^[A-z]+$/;

  let updateName = function(e, person, property, $error){
    var keyCode = e.which || e.keyCode || e.keyIdentifier || 0;
    let isAlphabetical = alphabeticalRegex.test(e.key);
    let isNotAlphabetical = isAlphabetical;
    let isNotSpace = (keyCode !== SPACE_KEY);
    let isNotBlank = e.target.value && e.target.value !== "";
    let isBlurEvent = e.type === 'blur';
    let isBlank = !isNotBlank;
    let isSpace = !isNotSpace;
    let isValid = (isNotBlank && isNotSpace && isAlphabetical);
    let personHasProperty = person[property];
    let personDoesNotHaveProperty = !personHasProperty;
    let value = e.target.value;

    if(isValid){
      value = value.charAt(0).toUpperCase() + value.slice(1);;
      e.target.value = value;
      $error.innerHTML = '';
      $personFullName.style.color = "black";
      person[property] = value;
      updateHeader();
    } else if(isSpace){
      value = value.replace(spaceRegex, '');
      e.target.value = value;
      $error.innerHTML = 'cannot contain spaces';
    } else if(!isAlphabetical){
      $error.innerHTML = 'cannot contain numbers, or special characters';
      value = value.replace(digitRegex, '')
      value = value.replace(nonAlphabeticalRegex, '')
      e.target.value = value;
    } else if(isBlank && isBlurEvent && personHasProperty){
      $error.innerHTML = 'cannot be blank, used last known name instead';
      e.target.value = person[property];
    }
  }
  $contactGivenNameInput.addEventListener('keyup', (e) => updateName(e, contact, 'givenName', $contactGivenNameError) );
  $contactGivenNameInput.addEventListener('blur', (e) => updateName(e, contact, 'givenName', $contactGivenNameError) );
  $contactFamilyNameInput.addEventListener('keyup', (e) => updateName(e, contact, 'familyName', $contactFamilyNameError) );
  $contactFamilyNameInput.addEventListener('blur', e => updateName(e, contact, 'familyName', $contactFamilyNameError) );
  $emergencyContactGivenNameInput.addEventListener('keyup', (e) => updateName(e, contact.knows[0], 'givenName', $emergencyContactGivenNameError) );
  $emergencyContactGivenNameInput.addEventListener('blur', e => updateName(e, contact.knows[0], 'givenName', $emergencyContactFamilyNameError) );
  $emergencyContactFamilyNameInput.addEventListener('keyup', (e) => updateName(e, contact.knows[0], 'familyName', $emergencyContactFamilyNameError) );
  $emergencyContactFamilyNameInput.addEventListener('blur', e => updateName(e, contact.knows[0], 'familyName', $emergencyContactFamilyNameError) );




  //EMAIL DOM
  var $contactCardEmailButton = document.querySelector("#contactCardEmailButton");
  var $contactCardEmailText = document.querySelector("#contactCardEmailText");
  var $contactEmailInput = document.querySelector('#contactEmailInput');
  var $contactEmailInputError = document.querySelector('#contactEmailInputError');
  var $contactEmailDivider = document.querySelector('#contactEmailDivider');

  var emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
  let updateEmail = function(e, person, property, $error){
    var keyCode = e.which || e.keyCode || e.keyIdentifier || 0;
    let isNotSpace = (keyCode !== SPACE_KEY);
    let isSpace = !isNotSpace;
    let isNotBlank = e.target.value && e.target.value !== "";
    let isBlank = !isNotBlank;
    let isBlurEvent = e.type === 'blur';

    let isValid = isNotSpace;
    let personHasProperty = person[property];
    let personDoesNotHaveProperty = !personHasProperty;
    let value = e.target.value;
    $error.innerHTML = '';

    if(isValid){
      let isEmail = emailRegex.test(value);
      let isNotEmail = !isEmail;
      if(isNotEmail && isNotBlank && isBlurEvent){
        hasErrors = true;
        $error.innerHTML = 'must be valid (e.g., your@email.com)';
        e.target.style.color = 'red';
        $contactCardEmailButton.style.backgroundColor = 'red';
        $contactCardEmailText.style.color = 'red';
        $contactCardEmailText.innerHTML = 'invalid';
        //-$contactEmailDivider.style.border = '2px solid red';
      } else if(isBlank){
        $error.innerHTML = '';
        e.target.style.color = 'black';
        $contactCardEmailButton.style.backgroundColor = '#808080';
        $contactCardEmailText.style.color = '#808080';
        $contactCardEmailText.innerHTML = 'email';
      } else if(isEmail && isBlurEvent){
        person[property] = value;
        $error.innerHTML = '';
        e.target.style.color = 'black';
        $contactCardEmailButton.style.backgroundColor = '#2681f5';
        $contactCardEmailText.style.color = '#2681f5';
        $contactCardEmailText.innerHTML = 'email';
      }
    } else if(isSpace){
      value = value.replace(spaceRegex, '');
      e.target.value = value;
      $error.innerHTML = 'cannot contain spaces';
    } else if(isBlank && isBlurEvent && personHasProperty){
      $error.innerHTML = 'cannot be blank, used last known email instead';
      e.target.value = person[property];
    }
  }
  $contactEmailInput.addEventListener('keyup', (e) => updateEmail(e, contact, 'email', $contactEmailInputError) );
  $contactEmailInput.addEventListener('blur', (e) => updateEmail(e, contact, 'email', $contactEmailInputError) );



  var $contactPhoneInput = document.querySelector('#contactInfoPhoneInput');
  var $contactPhoneInputError = document.querySelector('#contactInfoPhoneError');
  let telephoneRegex = /^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$/
  let formatTelephoneNumber = function(s){
      var s2 = (""+s).replace(/\D/g, '');
      var m1 = s2.match(/^(\d{1})$/);
      var m2 = s2.match(/^(\d{2})$/);
      var m3 = s2.match(/^(\d{3})$/);
      var m4 = s2.match(/^(\d{3})(\d{1})$/);
      var m5 = s2.match(/^(\d{3})(\d{2})$/);
      var m6 = s2.match(/^(\d{3})(\d{3})$/);
      var m7 = s2.match(/^(\d{3})(\d{3})(\d{1})$/);
      var m8 = s2.match(/^(\d{3})(\d{3})(\d{2})$/);
      var m9 = s2.match(/^(\d{3})(\d{3})(\d{3})$/);
      var m10 = s2.match(/^(\d{3})(\d{3})(\d{4})$/);

      let finalFormat = "";
      finalFormat = m1? `(${m1[1]}) - ` : finalFormat;
      finalFormat = m2? `(${m2[1]}) - ` : finalFormat;
      finalFormat = m3? `(${m3[1]}) - ` : finalFormat;
      finalFormat = m4? `(${m4[1]}) ${m4[2]}- ` : finalFormat;
      finalFormat = m5? `(${m5[1]}) ${m5[2]}- ` : finalFormat;
      finalFormat = m6? `(${m6[1]}) ${m6[2]}- ` : finalFormat;
      finalFormat = m7? `(${m7[1]}) ${m7[2]}-${m7[3]}` : finalFormat;
      finalFormat = m8? `(${m8[1]}) ${m8[2]}-${m8[3]}` : finalFormat;
      finalFormat = m9? `(${m9[1]}) ${m9[2]}-${m9[3]}` : finalFormat;
      finalFormat = m10? `(${m10[1]}) ${m10[2]}-${m10[3]}` : finalFormat;
      return finalFormat;
  }


  let updateTelephone = function(e, person, property, $error){

    if(e.inputType !== 'deleteContentBackward'){
      e.target.value = formatTelephoneNumber(e.target.value)
      let telephone = e.target.value.replace(/\D/g, '');
      let numDigits = telephone.length;
      numDigits += numDigits >= 6? 4 : 0;
      numDigits += numDigits >= 3 && numDigits < 6? 3 : 0;
      numDigits += numDigits < 3? 1 : 0;
      e.target.setSelectionRange(numDigits,numDigits)
      let isBlank = (e.target.value === '' || e.target.value === null || typeof e.target.value === 'undefined');
      let isNotBlank = !isBlank;
      let isValid = telephoneRegex.test(e.target.value);
      let isNotValid = !isValid;
      let isBlurEvent = e.type === 'blur';
      let isContact = person === contact;
      let isEmergencyContact = !isContact;

      if(isValid){
        $error.innerHTML = '';
        e.target.style.color = 'black';
        if(isContact){
          $contactCardPhoneButton.style.backgroundColor = '#2681f5';
          $contactCardPhoneText.style.color = '#2681f5';
          $contactCardPhoneText.innerHTML = 'phone';
        }
      } else if(isBlurEvent && isValid){
        person[property] = telephone;
      } else if(isNotValid && isNotBlank && isBlurEvent) {
        hasErrors = true;
        $error.innerHTML = 'must be ten digits long: (555) 555-5555';
        e.target.style.color = 'red';
        if(isContact){
          $contactCardPhoneButton.style.backgroundColor = 'red';
          $contactCardPhoneText.style.color = 'red';
          $contactCardPhoneText.innerHTML = 'invalid';
        }
      } else if (isBlank && isContact){
        $contactCardPhoneButton.style.backgroundColor = '#808080';
        $contactCardPhoneText.style.color = '#808080';
        $contactCardPhoneText.innerHTML = 'phone';
      }
    }
    //DELETING
    else {
      let value = e.target.value;
      let lastIndex = value.length - 1;
      let nextChar = value.charAt(lastIndex)
      let secondToLastChar = value.charAt(lastIndex-1)
      if(nextChar === '-'){
        e.target.value = value.substring(0, lastIndex);
      }else if(nextChar === ' '){
        e.target.value = value.substring(0, lastIndex);
        e.target.setSelectionRange(lastIndex-1,lastIndex-1)
      }else if(secondToLastChar === '('){
        e.target.value = '';
      }
    }
  }
  $contactPhoneInput.addEventListener('input', (e) => updateTelephone(e, contact, 'telephone', $contactPhoneInputError) );
  $contactPhoneInput.addEventListener('blur', (e) => updateTelephone(e, contact, 'telephone', $contactPhoneInputError) );
  $emergencyContactTelephoneInput.addEventListener('input', (e) => updateTelephone(e, emergencyContact, 'telephone', $emergencyContactTelephoneError) );
  $emergencyContactTelephoneInput.addEventListener('blur', (e) => updateTelephone(e, emergencyContact, 'telephone', $emergencyContactTelephoneError) );













  $contactGivenNameInput.select();
  $contactGivenNameInput.blur();
  $contactFamilyNameInput.select();
  $contactEmailInput.blur();
  $contactEmailInput.select();
  $contactFamilyNameInput.blur();
  $contactPhoneInput.select();
  $contactPhoneInput.blur();

  $emergencyContactGivenNameInput.select();
  $emergencyContactGivenNameInput.blur();
  $emergencyContactFamilyNameInput.select();
  $emergencyContactFamilyNameInput.blur();
  $emergencyContactTelephoneInput.select();
  $emergencyContactTelephoneInput.blur();






